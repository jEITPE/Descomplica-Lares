from langchain_community.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import json
import csv
import os
import re

class QuestionnaireAI:
    def __init__(self, api_key, csv_file_path, markdown_path=None, json_path=None):
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            max_tokens=130,
            temperature=0.2,
            top_p=0.7,
            frequency_penalty=0.5,
            presence_penalty=0.0,
            openai_api_key=api_key
        )
        self.csv_file_path = csv_file_path
        
        # Carrega o conhecimento do treinamento
        self.knowledge_base = self.load_knowledge_base(markdown_path, json_path)
        
        # Prompt para responder perguntas usando o conhecimento base
        self.answer_prompt = PromptTemplate(
            input_variables=["question", "knowledge_base", "current_field"],
            template="""
            Voc√™ √© a Lare, assistente virtual da Descomplica Lares, especializada em responder d√∫vidas sobre o processo de compra de im√≥veis.
            Use a base de conhecimento fornecida para responder √† pergunta do usu√°rio de forma amig√°vel e prestativa.

            Base de Conhecimento:
            {knowledge_base}

            Contexto atual: O usu√°rio est√° respondendo perguntas sobre {current_field}
            Pergunta do usu√°rio: {question}

            Regras para resposta:
            1. Seja direta e objetiva, mas mantenha um tom amig√°vel
            2. Use emojis para tornar a resposta mais acolhedora
            3. Se a resposta estiver na base de conhecimento, use-a como refer√™ncia
            4. Se n√£o tiver certeza, diga algo como "N√£o tenho essa informa√ß√£o espec√≠fica, mas posso chamar um corretor para te ajudar melhor! üòä"
            5. Ap√≥s responder a d√∫vida, incentive a continuar o formul√°rio
            6. Mantenha as respostas curtas e diretas

            Exemplos de respostas:
            - Para d√∫vidas sobre idade: "A idade m√≠nima √© 18 anos! üòä Podemos continuar com o formul√°rio?"
            - Para d√∫vidas sobre documentos: "Voc√™ precisar√° de RG, CPF e comprovante de resid√™ncia! üìÑ Vamos continuar?"
            - Para d√∫vidas sobre restri√ß√µes: "Sim, √© poss√≠vel dar entrada mesmo com algumas restri√ß√µes! Cada caso √© analisado individualmente ü§ù"

            Sempre respostas curtas e diretas! Nunca responda algo que voc√™ n√£o tem conhecimento, algo que voc√™ n√£o foi treinada pra dizer,
    ou algo que n√£o tenha nada haver com a Imobili√°ria em si!

    - Se o cliente disser algo como "obrigado", "valeu", "entendi", "blz" ou "agradecido", responda com algo como "De nada! Se precisar de algo mais, estarei aqui. üòä"
    - Se o cliente disser algo como "ok", "entendido" ou "finalizar", responda com algo como "Certo! Estarei por aqui caso precise. At√© logo! üëã"."
    - Nunca invente informa√ß√µes ou forne√ßa respostas fora do escopo da imobili√°ria.
    - Seja educada e simp√°tica, mas sempre clara e objetiva.

    N√£o se refira ao cliente, s√≥ responda √†s suas perguntas.

    ### Exemplos de perguntas que voc√™ pode responder:
    1. "Quais os documentos que eu preciso para dar entrada?" (Responda com a lista de documentos necess√°ria).
    2. "Onde voc√™s se localizam?" (Responda com o endere√ßo fornecido).
    3. "Voc√™s trabalham com im√≥veis comerciais?" (Responda que a imobili√°ria trabalha apenas com resid√™ncias).
    4. "O endere√ßo de voc√™s √© o mesmo que est√° no cat√°logo?" (Responda algo como: "Sim, nosso endere√ßo √© o mesmo do cat√°logo: Rua Padre Antonio, 365.")

    ### Restri√ß√µes:
    - Nunca invente informa√ß√µes.
    - Nunca forne√ßa dados n√£o inclu√≠dos nas instru√ß√µes do markdown.
    - Nunca interfir√° quando a mensagem do cliente for sobre:
        - Marcar uma reuni√£o. "Gostaria de marcar uma reuni√£o" "Como posso marcar uma reuni√£o?"
        - Marcar uma visita. "Acho melhor marcar uma visita para conhecer o local e os empreendimentos!" "Quero agendar uma visita" "Como posso marcar uma visita"
        - Querer comprar ou dar entrada algum apartamento ou empreendimento. "Quero dar entrada/comprar em um apartamento"

        
    ### Hist√≥rico de mensagens:
    1. Se o cliente perguntar algo j√° mencionado anteriormente, responda refor√ßando as informa√ß√µes do {historico}. 
    2. Se o cliente fizer refer√™ncia a uma pergunta anterior, revise o {historico} e, se aplic√°vel, conecte a resposta com o que j√° foi discutido. 
    3. Caso o cliente pe√ßa um resumo, gere um resumo curto com base no {historico} fornecido.
    4. Sempre verifique se as instru√ß√µes fornecidas no markdown t√™m prioridade sobre o {historico}, e s√≥ utilize o {historico} como suporte adicional. 
    5. Nunca forne√ßa informa√ß√µes que n√£o est√£o nas instru√ß√µes ou no {historico}.
    6. Se o hist√≥rico tiver sido reiniciado, e o cliente voltar, ou algo desse tipo, responda com: "Desculpe, mas n√£o tenho um hist√≥rico recente da nossa conversa. Posso te ajudar com alguma d√∫vida espec√≠fica? üòä"
    
         
    Use emojis, para dar o sentimento de simpatia!

        Responda as perguntas normalmente, sem 'Lola:'.


            Responda de forma natural e amig√°vel:
            """
        )
        self.answer_chain = LLMChain(llm=self.llm, prompt=self.answer_prompt)
        
        self.questions = {
            "nome": {
                "pergunta": "Por favor, informe o seu *nome completo*.",
                "validacao": lambda x: len(x.split()) >= 2,
                "erro": "O nome deve conter pelo menos dois nomes (nome e sobrenome)."
            },
            "idade": {
                "pergunta": "Quantos *anos* voc√™ tem? _(Ex: *35*)_",
                "validacao": lambda x: x.isdigit(),
                "erro": "A idade deve ser um n√∫mero inteiro v√°lido."
            },
            "cpf": {
                "pergunta": "Qual √© o seu *CPF*? _(XXX.XXX.XXX-XX)_",
                "validacao": lambda x: bool(re.match(r"^\d{3}\.\d{3}\.\d{3}-\d{2}$", x)),
                "erro": "O CPF deve estar no formato XXX.XXX.XXX-XX."
            },
            "carteira_assinada": {
                "pergunta": "Voc√™ tem carteira assinada h√° mais de 3 anos?",
                "template_id": "template_3anos"
            },
            "estado_civil": {
                "pergunta": "Qual √© o seu *estado civil*?"
            },
            "trabalho": {
                "pergunta": "Voc√™ √© registrado ou aut√¥nomo?",
                "template_id": "template_autonomo_registrado"
            },
            "restricao_cpf": {
                "pergunta": "Voc√™ sabe se tem *restri√ß√£o* no CPF? _(Ex: D√≠vidas, Erros cadastrais)_"
            },
            "filhos_menores": {
                "pergunta": "Voc√™ tem filhos menores de idade?",
                "template_id": "template_filhos"
            },
            "renda_bruta": {
                "pergunta": "Qual √© a sua *Renda Bruta Mensal* üí∏ _(Ex: 4500,00)_",
                "validacao": lambda x: bool(re.match(r"^\d+([.,]\d{2})?$", x.replace("R$", "").strip())),
                "erro": "A renda bruta deve ser um valor num√©rico v√°lido (Ex: 4500,00)."
            },
            "dia": {
                "pergunta": "Qual dia voc√™ gostaria de visitar? _(Ex: 25/03)_",
                "validacao": lambda x: bool(re.match(r"^(0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[0-2])$", x)),
                "erro": "A data deve estar no formato DD/MM (ex: 25/03)."
            },
            "horario": {
                "pergunta": "Qual o melhor hor√°rio para voc√™ visitar? üòä Os hor√°rios dispon√≠veis s√£o de _*Segunda a S√°bado das 09:00 √†s 20:00 e Domingo das 09:00 √†s 12:00.*_ \nPor favor, escolha um hor√°rio terminando com *5 no final* _(Ex: 10:35, 11:15)_",
                "validacao": lambda x: bool(re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5]5$", x)),
                "erro": "O hor√°rio deve estar no formato HH:MM e terminar com 5 (ex: 10:35, 11:15)."
            }
        }
        
        self.fallback_prompt = PromptTemplate(
            input_variables=["message", "current_question", "context", "historico", "last_question", "current_stage"],
            template="""
            Voc√™ √© um assistente especializado em identificar quando um usu√°rio est√° respondendo corretamente a um question√°rio ou desviando do fluxo, seja fazendo perguntas, expressando d√∫vidas ou mudando de assunto. Sua fun√ß√£o √© analisar a intera√ß√£o do usu√°rio e decidir se ele est√° seguindo o fluxo normal do question√°rio ou se precisa de assist√™ncia.

O assistente recebe tr√™s informa√ß√µes principais: o estado atual do cliente no question√°rio {current_stage}, a √∫ltima pergunta feita ao cliente {last_question} e a mensagem recebida {message}. A an√°lise da mensagem deve seguir regras r√≠gidas para determinar se a resposta do usu√°rio est√° de acordo com a pergunta anterior ou se ele est√° desviando do fluxo.

Se a mensagem do usu√°rio for uma resposta v√°lida √† √∫ltima pergunta feita, o assistente deve responder com "CONTINUE_FLOW", permitindo que o question√°rio prossiga normalmente. Caso a mensagem indique uma d√∫vida, uma nova pergunta, um pedido de esclarecimento ou qualquer outro tipo de desvio, o assistente deve responder com "FALLBACK", sinalizando que a intera√ß√£o do usu√°rio n√£o est√° alinhada com a pergunta atual e que pode ser necess√°rio intervir para manter o fluxo correto.

Para classificar corretamente as mensagens, o assistente deve seguir as seguintes regras estritas:

Se a mensagem do usu√°rio for uma resposta direta √† √∫ltima pergunta, mesmo que simples ou incompleta, ela deve ser classificada como "CONTINUE_FLOW". Isso inclui respostas num√©ricas quando a pergunta esperava um n√∫mero (como idade, CPF, valor de renda), respostas curtas de "sim" ou "n√£o" quando a pergunta foi bin√°ria, e respostas com palavras-chave esperadas (como "casado", "solteiro", "aut√¥nomo", "registrado" para perguntas sobre estado civil e trabalho).

Se a mensagem do usu√°rio contiver uma interroga√ß√£o (?), ela deve ser classificada como "FALLBACK", pois indica que o usu√°rio est√° perguntando algo novo ou expressando uma d√∫vida.

Se a mensagem come√ßar com palavras interrogativas como "qual", "como", "onde", "quando", "por que" ou "quem", deve ser classificada como "FALLBACK", pois indica que o usu√°rio est√° fazendo uma nova pergunta em vez de responder ao question√°rio.

Se a mensagem do usu√°rio expressar d√∫vida de forma expl√≠cita, como "n√£o entendi", "pode explicar?", "n√£o sei o que responder" ou algo semelhante, ela deve ser classificada como "FALLBACK", pois indica que o usu√°rio precisa de esclarecimento antes de continuar.

Se a mensagem pedir informa√ß√µes adicionais ou esclarecimentos sobre o processo, deve ser classificada como "FALLBACK", pois isso significa que o usu√°rio n√£o est√° respondendo diretamente √† √∫ltima pergunta, mas sim buscando entender melhor o contexto.

Se a mensagem do usu√°rio mencionar um assunto n√£o relacionado √† √∫ltima pergunta feita, ela deve ser classificada como "FALLBACK". Por exemplo, se a √∫ltima pergunta foi sobre idade e o usu√°rio responde mencionando dinheiro ou renda, a resposta est√° fora de contexto e deve ser tratada como um desvio do fluxo.

Se a resposta do usu√°rio for uma sauda√ß√£o ou agradecimento simples, como "ok", "obrigado" ou "tudo bem", ela deve ser classificada como "CONTINUE_FLOW", pois n√£o altera o fluxo do question√°rio.

Se a resposta for um valor num√©rico esperado, como um CPF quando perguntado sobre CPF, uma idade v√°lida quando perguntado sobre idade, um hor√°rio quando perguntado sobre hor√°rio de visita ou um valor monet√°rio quando perguntado sobre renda, a resposta deve ser classificada como "CONTINUE_FLOW".

Se a mensagem do usu√°rio menciona "registrado" ou "aut√¥nomo" ao responder sobre trabalho, deve ser classificada como "CONTINUE_FLOW", pois corresponde √†s op√ß√µes esperadas.

Se houver qualquer incerteza sobre se a mensagem do usu√°rio √© uma resposta v√°lida ou n√£o, o assistente deve classificar como "FALLBACK", garantindo que o usu√°rio receba assist√™ncia caso precise.

Exemplos pr√°ticos de classifica√ß√£o:

Se a pergunta for "Qual √© a sua idade?" e o usu√°rio responder "25", "35 anos" ou "tenho 30", a resposta deve ser "CONTINUE_FLOW", pois s√£o respostas diretas √† pergunta. Por√©m, se a resposta for "Qual idade m√≠nima?", "E se eu tiver menos?", ou "Por que precisa da idade?", deve ser "FALLBACK", pois o usu√°rio est√° fazendo uma pergunta ou expressando d√∫vida.

Se a pergunta for "Qual √© o seu CPF?" e o usu√°rio responder "123.456.789-10" ou "N√£o tenho aqui agora", deve ser "CONTINUE_FLOW", pois s√£o respostas v√°lidas. No entanto, se o usu√°rio perguntar "Pode ser o CPF do meu marido?" ou "Como fa√ßo para tirar um CPF?", deve ser "FALLBACK", pois ele est√° desviando do question√°rio.

Se a pergunta for "Qual √© a sua renda bruta mensal?" e o usu√°rio responder "4500,00", "Ganho 3000 reais" ou "5000", deve ser "CONTINUE_FLOW", pois s√£o respostas esperadas. No entanto, se o usu√°rio perguntar "O que √© renda bruta?", "Pode incluir hora extra?" ou "Precisa de comprovante?", deve ser "FALLBACK", pois ele est√° expressando d√∫vida ou pedindo esclarecimentos.

Se a pergunta for "Voc√™ tem filhos?" e o usu√°rio responder "Sim, tenho 2" ou "N√£o", deve ser "CONTINUE_FLOW". No entanto, se a resposta for "Preciso informar quantos?" ou "Qual a idade m√≠nima?", deve ser "FALLBACK", pois n√£o responde diretamente √† pergunta.

Se a pergunta for "Qual o seu nome?" e o usu√°rio responder "Jo√£o", "Maria", "Pedro" ou qualquer nome v√°lido, a resposta deve ser "CONTINUE_FLOW". Por√©m, se o usu√°rio perguntar "Qual nome?" ou "Preciso informar nome completo?", a resposta deve ser "FALLBACK", pois indica d√∫vida.

Se a pergunta for "Qual o seu hor√°rio de visita?" e o usu√°rio responder "10:30" ou "15:45", deve ser "CONTINUE_FLOW", pois s√£o hor√°rios v√°lidos. Por√©m, se o usu√°rio perguntar "Que horas voc√™s est√£o atendendo?" ou "Pode ser qualquer hor√°rio?", deve ser "FALLBACK", pois est√° pedindo informa√ß√µes adicionais.

Caso a resposta n√£o tenha certeza se √© v√°lida ou n√£o, o assistente deve sempre escolher "FALLBACK", garantindo que o usu√°rio receba suporte antes de continuar o question√°rio.

No final, o assistente responde exclusivamente com "CONTINUE_FLOW" caso a resposta seja v√°lida ou "FALLBACK" caso o usu√°rio tenha d√∫vidas ou esteja desviando do fluxo esperado.
            """
        )
        self.fallback_chain = LLMChain(llm=self.llm, prompt=self.fallback_prompt)
        
        # Definindo a ordem das perguntas
        self.question_order = [
            "nome",
            "idade",
            "cpf",
            "carteira_assinada",
            "estado_civil",
            "trabalho",
            "restricao_cpf",
            "filhos_menores",
            "renda_bruta"
        ]
        
        # Ordem espec√≠fica para visita
        self.visita_order = self.question_order + ["dia", "horario"]
        
        self.conversation_history = []
        self.current_context = {}
        
    def load_knowledge_base(self, markdown_path, json_path):
        """Carrega e combina o conhecimento do markdown e json"""
        knowledge = ""
        
        # Carrega markdown se fornecido
        if markdown_path and os.path.exists(markdown_path):
            try:
                with open(markdown_path, 'r', encoding='utf-8') as f:
                    knowledge += f.read() + "\n\n"
            except Exception as e:
                print(f"Erro ao carregar markdown: {e}")
        
        # Carrega json se fornecido para o treinamento
        if json_path and os.path.exists(json_path):
            try:
                with open(json_path, 'r', encoding='utf-8') as f:
                    json_data = json.load(f)
                    # Formata as perguntas e respostas do JSON
                    for qa in json_data.get("treinamento", []):
                        knowledge += f"Pergunta: {qa['pergunta']}\nResposta: {qa['resposta']}\n\n"
            except Exception as e:
                print(f"Erro ao carregar json: {e}")
        
        return knowledge

    def get_answer_from_knowledge_base(self, question, current_field=""):
        """Busca uma resposta na base de conhecimento"""
        try:
            response = self.answer_chain.invoke(
                input={
                "question": question,
                "knowledge_base": self.knowledge_base,
                "current_field": current_field
            })
            return response
        except Exception as e:
            print(f"Erro ao buscar resposta: {e}")
            return None

    def process_message(self, message, current_field, historico=""):
        """Processa a mensagem do usu√°rio e retorna uma resposta apropriada"""
        try:
            # Verifica se √© uma pergunta ou d√∫vida usando o fallback_chain
            fallback_response = self.fallback_chain.invoke({
                "message": message,
                "current_question": self.questions[current_field]["pergunta"],
                "context": historico,
                "last_question": self.questions[current_field]["pergunta"],
                "current_stage": current_field
            })
            fallback_result = str(fallback_response.get('text', '')).strip()
            
            if fallback_result == "FALLBACK":
                # Se for uma d√∫vida, busca resposta na base de conhecimento
                answer = self.get_answer_from_knowledge_base(message, current_field)
                if answer:
                    return {
                        "type": "fallback",
                        "message": answer
                    }
                else:
                    return {
                        "type": "fallback",
                        "message": "Desculpe, n√£o entendi sua d√∫vida. Pode reformular? üòä"
                    }
            
            # Se n√£o for fallback, valida a resposta
            if current_field in self.questions and "validacao" in self.questions[current_field]:
                is_valid = self.questions[current_field]["validacao"](message)
                if not is_valid:
                    return {
                        "type": "error",
                        "message": self.questions[current_field]["erro"]
                    }
            
            # Se passou pela valida√ß√£o, retorna sucesso
            return {
                "type": "success",
                "field": current_field,
                "value": message
            }
            
        except Exception as e:
            print(f"Erro ao processar mensagem: {e}")
            return {
                "type": "error",
                "message": "Desculpe, tive um problema ao processar sua mensagem. Pode tentar novamente?"
            }

    def process_message_new(self, message):
        """M√©todo legado mantido para compatibilidade"""
        return self.process_message(message, "geral", "")
        
    def get_first_question(self, tipo_questionario="reuniao"):
        """Retorna a primeira pergunta do question√°rio"""
        field = self.question_order[0]
        return {
            "field": field,
            "question": self.questions[field]["pergunta"],
            "template_id": self.questions[field].get("template_id")
        }
        
    def get_next_question(self, current_field, tipo_questionario="reuniao"):
        """Retorna a pr√≥xima pergunta baseada na ordem definida"""
        order = self.visita_order if tipo_questionario == "visita" else self.question_order
        try:
            current_index = order.index(current_field)
            if current_index + 1 < len(order):
                next_field = order[current_index + 1]
                return {
                    "field": next_field,
                    "question": self.questions[next_field]["pergunta"],
                    "template_id": self.questions[next_field].get("template_id")
                }
        except ValueError:
            pass
        return None
        
    def clean_and_validate_data(self, respostas):
        """Limpa e valida os dados antes de salvar"""
        cleaned_data = {}
        for field, value in respostas.items():
            # Remove espa√ßos extras
            value = value.strip()
            
            # Formata√ß√£o espec√≠fica por campo
            if field == "cpf":
                # Remove qualquer caractere n√£o num√©rico
                value = re.sub(r'[^\d]', '', value)
                # Formata o CPF
                value = f"{value[:3]}.{value[3:6]}.{value[6:9]}-{value[9:]}"
            elif field == "renda_bruta":
                # Remove R$ e espa√ßos
                value = value.replace("R$", "").strip()
                # Garante duas casas decimais
                if "," in value:
                    value = value.replace(".", "").replace(",", ".")
                if "." not in value:
                    value = value + ".00"
                elif len(value.split(".")[1]) == 1:
                    value = value + "0"
            elif field in ["nome", "estado_civil"]:
                # Capitaliza nomes pr√≥prios
                value = value.title()
            elif field == "horario":
                # Garante formato HH:MM
                if len(value.split(":")[0]) == 1:
                    value = "0" + value
            
            cleaned_data[field] = value
        return cleaned_data
        
    def save_to_csv(self, respostas):
        # Cria o diret√≥rio se n√£o existir
        os.makedirs(os.path.dirname(self.csv_file_path), exist_ok=True)

        # Limpa e valida os dados
        cleaned_data = self.clean_and_validate_data(respostas)

        headers = list(self.questions.keys()) + ["dia", "horario"]
        data = {field: cleaned_data.get(field, "") for field in headers}

        file_exists = os.path.isfile(self.csv_file_path)

        with open(self.csv_file_path, "a", newline="", encoding="utf-8") as file:
            writer = csv.DictWriter(file, fieldnames=headers)
            if not file_exists:
                writer.writeheader()  # Garante que o cabe√ßalho √© escrito apenas uma vez
            writer.writerow(data)
        
        print(f"‚úÖ Dados salvos no CSV: {data}")
 